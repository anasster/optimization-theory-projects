function [x_current, num_iters] = steepestDescentAlgorithm(f, x_initial, gamma, epsilon)
% Function that utilizes the steepest descent algorithm on 3 different
% occasions:
% 1. By the user's choice of the step gamma
% 2. The algorithm chooses the gamma in order to minimize a certain
% expression
% 3. By using Armijo's rule

syms x y;

% Initialize values
x_current = x_initial;
gradient_at_point = double(subs(gradient(f, [x ,y]), [x, y], x_current));
num_iters = 0;
% 1. User's choice
if isnumeric(gamma)
    while norm(gradient_at_point) >= epsilon
        x_current = x_current - gamma * gradient_at_point;
        gradient_at_point = double(subs(gradient(f), old=[x, y], new=x_current));
        num_iters = num_iters + 1;
    end
elseif isstring(gamma)
    switch gamma
        case 'minimize'
            while norm(gradient_at_point) >= epsilon
                h = @(g) subs(f, [x, y], x_current - g*gradient_at_point); 
                [g1, g2] = goldenSectionAlgorithm(0, 1, 0.01, h);
                gamma_min = (g1+g2)/2;
                gradient_at_point = subs(gradient(f), [x, y], x_current);
                x_current = x_current - gamma_min * gradient_at_point;
                num_iters = num_iters + 1;
            end
        case 'armijo'
    end
end


end 
